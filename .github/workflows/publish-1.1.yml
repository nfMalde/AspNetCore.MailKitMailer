name: Release 1.1.x
on:
  push:
    branches: [ release-1.1.x ]   

jobs:
  
  publish:
    runs-on: windows-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Generate Version Number
        shell: pwsh
        id: v
        run: | 
          # Check if we are on a version branch or release branch (eg. 1.1.x or release-1.1.x)
          $currentBranch = $Env:GITHUB_REF_NAME
          echo $currentBranch
          return 0
          $isReleaseBranch = ("$($currentBranch)").StartsWith("release-");

          $parsedBranchName = $currentBranch;

          if ($isReleaseBranch) {
              Write-Host "We are on release branch. Versioning will be permanent"
              $parsedBranchName = ("$($currentBranch)").Substring(("release-").Length)

          }

          if ($parsedBranchName.StartsWith('v')) {
              $parsedBranchName = $parsedBranchName.Substring(1)

          }

          $isVersionBranch = $parsedBranchName -match "(\d+.\d+.x)"

          if (!$isVersionBranch) {
              Write-Host "Canceling. Not a version branch"
              return 0
          }
          
          $versionParts = $parsedBranchName.Split('.')
          $versionPrefix = "$($versionParts[0]).$($versionParts[1])" 
          $startVersion = [version]::Parse("$($versionPrefix).0")
          # Get Git Tags
          $gitTags = git tag --list --sort=-version:refname "v$($versionPrefix).*"
          $newVersion = [version]::Parse("$($startVersion.Major).$($startVersion.Minor).$($startVersion.Build+1)")
          Write-Host "Tags: $($gitTags)"
          if ($gitTags.Length -gt 0) {
            if ($gitTags[0][0] -eq "v") {
                $latest =  ("$($gitTags[0])").Substring(1)

                Write-Host "Latest  Tag is $($latest)"
                $versionInfo = [Version]::Parse($latest)

                if ($versionInfo) {
                    Write-Host "Version Parsed: $($versionInfo.Major).$($versionInfo.Minor).$($versionInfo.Build)."
                    $newVersion = [version]::Parse("$($versionInfo.Major).$($versionInfo.Minor).$($versionInfo.Build+1)")

                }
            }
          }


          Write-Host "New Version is $($newVersion.Major).$($newVersion.Minor).$($newVersion.Build)"

          Write-Output "::set-output name=version::$($newVersion.Major).$($newVersion.Minor).$($newVersion.Build)"
      - name: Print Version
        run: echo '${{ steps.v.outputs.version }}'      
      - name: Get Change Info
        id: info
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: src/AspNetCore.MailKitMailer/AspNetCore.MailKitMailer.csproj
          xpath: '//PackageReleaseNotes'
      - name: Print Change Info
        run: echo '${{ steps.info.outputs.info  }}'
      - name: Create Release and Tag
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.v.outputs.version  }}
          release_name: Release ${{ steps.v.outputs.version  }}
          body: '${{ steps.info.outputs.info  }}'
          draft: false
          prerelease: false
      - name: Setup .net 5
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
